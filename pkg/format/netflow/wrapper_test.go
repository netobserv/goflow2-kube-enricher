package netflow

import (
	"testing"

	"github.com/netobserv/goflow2-kube-enricher/pkg/flow"
	"github.com/stretchr/testify/assert"
)

func TestWrapperSingleMessage(t *testing.T) {
	assert := assert.New(t)
	c := make(chan flow.Record, 5)
	wrapper := NewWrapper(c)
	data := []byte{
		0x08, 0x04, 0x10, 0xa6, 0x87, 0x91, 0x8b, 0x06, 0x20, 0x02, 0x32, 0x04,
		0x0a, 0xf4, 0x02, 0x03, 0x3a, 0x04, 0x0a, 0xf4, 0x02, 0x02, 0x48, 0xc0,
		0xa2, 0x01, 0x50, 0x90, 0x03, 0x5a, 0x04, 0x64, 0x40, 0x00, 0x03, 0x90,
		0x01, 0x07, 0xa0, 0x01, 0x06, 0xa8, 0x01, 0xf5, 0x3f, 0xb0, 0x01, 0xb6,
		0xda, 0x02, 0xd8, 0x01, 0x83, 0x84, 0xd0, 0xd7, 0x80, 0xcb, 0x02, 0xe0,
		0x01, 0x8a, 0xf2, 0xac, 0xec, 0xae, 0xd9, 0x30, 0xf0, 0x01, 0x80, 0x10,
		0x0a, 0x08, 0x04, 0x10, 0xe7, 0x87, 0x91, 0x8b, 0x06, 0x20,
	}
	err := wrapper.Send(nil, data)
	assert.Nil(err)
	message := <-c
	assert.Contains(message, "SrcMac")
	assert.Equal(message["SrcMac"], "0a:58:0a:f4:02:03")
	assert.Contains(message, "SrcAddr")
	assert.Equal(message["SrcAddr"], "10.244.2.3")
	assert.Contains(message, "DstMac")
	assert.Equal(message["DstMac"], "c2:ca:ed:8b:39:0a")
	assert.Contains(message, "DstAddr")
	assert.Equal(message["DstAddr"], "10.244.2.2")
}

func TestWrapperError(t *testing.T) {
	assert := assert.New(t)
	c := make(chan flow.Record, 5)
	wrapper := NewWrapper(c)
	data := []byte{
		0xff, 0xab, 0xcd, 0xef,
	}
	err := wrapper.Send(nil, data)
	assert.Error(err)
}
